#!/bin/bash
set -euo pipefail

# --- Configuration ---
DOCKER_IMAGE_NAME="jbsays"
DOCKER_IMAGE_TAG="fullstack"
DOCKER_FULL_IMAGE="${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
DEFAULT_PROMPT_FILENAME="double_trinity_prompt.md"
FALLBACK_TO_INTERACTIVE=true
INIT_MODE=false
NO_GIT=false
CONTENT_AT_ROOT=false
MCP_CONFIG_FILE=""
ALLOWED_TOOLS=""
PORT_MAPPINGS=()
DOCKER_NETWORK=""
CONTAINER_NAME="jbsays"

# Double Trinity Canon Structure
CANON_DOMAINS=("meta" "rules" "release")
CANON_LOCI_PRIMARY=("content" "request_for_changes")
# Note: human_inbox is now replaced by a single root-level inbox/ directory

# --- Focus Area Weights ---
# Define base weight and multipliers
BASE_WEIGHT=10 # Assign a base weight for most areas
# Associative array for weights. Key: focus_area, Value: weight
declare -A FOCUS_AREA_WEIGHTS
FOCUS_AREA_WEIGHTS["meta/content"]=${BASE_WEIGHT}
FOCUS_AREA_WEIGHTS["meta/request_for_changes"]=${BASE_WEIGHT}
FOCUS_AREA_WEIGHTS["rules/content"]=${BASE_WEIGHT}
FOCUS_AREA_WEIGHTS["rules/request_for_changes"]=${BASE_WEIGHT}
FOCUS_AREA_WEIGHTS["release/content"]=$((BASE_WEIGHT * 10)) # Double weight for release/content
FOCUS_AREA_WEIGHTS["release/request_for_changes"]=$((BASE_WEIGHT * 2))


# --- Helper Functions ---
log() { echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"; }

# Add MCP flags to DOCKER_CMD_OVERRIDE if configured
add_mcp_flags() {
    if [ -n "${MCP_CONFIG_FILE_ABS:-}" ]; then
        DOCKER_CMD_OVERRIDE+=("--mcp-config" ".mcp.json")
    fi
    if [ -n "$ALLOWED_TOOLS" ]; then
        DOCKER_CMD_OVERRIDE+=("--allowedTools" "$ALLOWED_TOOLS")
    fi
}
usage() {
    echo "Usage: $0 --project-path <path_to_project_dir> [--magicprompt <path_to_prompt.md>] [--project-vision <string_or_path>] [--prompt-override <text_or_path>] [--prompt-append <text_or_path>] [--max-turns-by-iteration <N>] [--enter] [--verbose] [--iterations <N>] [--nofallback] [--init] [--show-final-prompt] [--force] [--no-git] [--content-at-root] [--mcp-config <mcp_config_file>] [--allowedTools <tool_pattern>] [--port <port_mapping>] [--network <network_name>] [--container-name <name>] [project_goal_string_or_path_or_-]"
    echo ""
    echo "Options:"
    echo "  --project-path <path>        Path to the project directory (required)"
    echo "  --magicprompt <file>         Custom prompt template file"
    echo "  --project-vision <text|file> Project vision/goal (text or file path)"
    echo "  --prompt-override <text|file> Override final prompt directly (text or file path)"
    echo "  --prompt-append <text|file>  Append extra content to the prompt (text or file path)"
    echo "  --max-turns-by-iteration <N> Maximum turns per iteration for agent mode"
    echo "  --enter                      Enter interactive mode"
    echo "  --verbose                    Enable verbose output"
    echo "  --iterations <N>             Number of iterations (0 = infinite)"
    echo "  --nofallback                 Don't fallback to interactive on agent failure"
    echo "  --init                       Initialize project structure"
    echo "  --show-final-prompt          Show the final prompt and exit"
    echo "  --force                      Force execution"
    echo "  --no-git                     Skip git initialization"
    echo "  --content-at-root            Create content at project root"
    echo "  --mcp-config <file>          MCP server configuration file"
    echo "  --allowedTools <pattern>     Allowed tools pattern (e.g., 'mcp__filesystem__*')"
    echo "  --port <mapping>             Add port mapping (format: host:container or port)"
    echo "  --network <network>          Connect container to an existing Docker network"
    echo "  --container-name <name>      Docker container name (default: jbsays)"
    echo ""
    exit 1
}

# --- Ensure tools are available on HOST ---
for cmd in awk envsubst realpath docker shuf; do # Added shuf
    if ! command -v $cmd &> /dev/null; then
        log "Error: Required command '$cmd' not found on host. Please install it."
        if [ "$cmd" = "envsubst" ]; then log "Hint: 'envsubst' is often part of the 'gettext' package."; fi
        if [ "$cmd" = "shuf" ]; then log "Hint: 'shuf' is often part of the 'coreutils' package."; fi
        exit 1
    fi
done

# --- Get script's own directory ---
SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)

# --- Parse Arguments ---
# ... (Argument parsing remains the same as the previous version) ...
PROJECT_DIR_HOST=""
CUSTOM_PROMPT_FILE_HOST=""
PROJECT_GOAL_CONTENT=""
PROMPT_OVERRIDE_CONTENT=""
PROMPT_APPEND_CONTENT=""
ENTER_MODE=false
ENTER_BYPASS_MODE=false
MAX_TURNS=40
VERBOSE_MODE=false
ITERATIONS=1
SHOW_FINAL_PROMPT=false
FORCE_MODE=false

POSITIONAL_ARGS=()
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        --project-path) PROJECT_DIR_HOST="$2"; shift 2 ;;
        --magicprompt) CUSTOM_PROMPT_FILE_HOST="$2"; shift 2 ;;
        --project-vision)
            if [ -f "$2" ]; then
                PROJECT_GOAL_CONTENT=$(cat "$2")
            else
                PROJECT_GOAL_CONTENT="$2"
            fi
            shift 2 ;;
        --prompt-override)
            if [ -f "$2" ]; then
                PROMPT_OVERRIDE_CONTENT=$(cat "$2")
            else
                PROMPT_OVERRIDE_CONTENT="$2"
            fi
            shift 2 ;;
        --prompt-append)
            if [ -f "$2" ]; then
                PROMPT_APPEND_CONTENT=$(cat "$2")
            else
                PROMPT_APPEND_CONTENT="$2"
            fi
            shift 2 ;;
        --max-turns-by-iteration) MAX_TURNS="$2"; shift 2 ;;
        --enter) ENTER_MODE=true; shift 1 ;;
        --enter-and-bypass) ENTER_MODE=true; ENTER_BYPASS_MODE=true; shift 1 ;;
        --verbose) VERBOSE_MODE=true; shift 1 ;;
        --iterations) ITERATIONS="$2"; shift 2 ;;
        --nofallback) FALLBACK_TO_INTERACTIVE=false; shift 1 ;;
        --init) INIT_MODE=true; ENTER_MODE=true; shift 1 ;;
        --show-final-prompt) SHOW_FINAL_PROMPT=true; shift 1 ;;
        --force) FORCE_MODE=true; shift 1 ;;
        --no-git) NO_GIT=true; shift 1 ;;
        --content-at-root) CONTENT_AT_ROOT=true; shift 1 ;;
        --mcp-config) MCP_CONFIG_FILE="$2"; shift 2 ;;
        --allowedTools) ALLOWED_TOOLS="$2"; shift 2 ;;
        --port) PORT_MAPPINGS+=("$2"); shift 2 ;;
        --network) DOCKER_NETWORK="$2"; shift 2 ;;
        --container-name) CONTAINER_NAME="$2"; shift 2 ;;
        --help|-h) usage ;;
        *) POSITIONAL_ARGS+=("$1"); shift 1 ;;
    esac
done

if [ -z "$PROJECT_DIR_HOST" ]; then log "Error: --project-path is mandatory."; usage; fi

if [ ${#POSITIONAL_ARGS[@]} -gt 0 ] && [ -z "$PROJECT_GOAL_CONTENT" ]; then
    ARG_CONTENT="${POSITIONAL_ARGS[0]}"
    if [ "$ARG_CONTENT" = "-" ]; then PROJECT_GOAL_CONTENT=$(cat)
    elif [ -f "$ARG_CONTENT" ]; then PROJECT_GOAL_CONTENT=$(cat "$ARG_CONTENT")
    else PROJECT_GOAL_CONTENT="$ARG_CONTENT"; fi
fi
if [ -z "$PROJECT_GOAL_CONTENT" ] && ! $SHOW_FINAL_PROMPT ; then
    log "Warning: No project vision/goal provided. The agent/session might lack clear direction."
fi

PROJECT_DIR_HOST_ABS=$(mkdir -p "$PROJECT_DIR_HOST" && realpath "$PROJECT_DIR_HOST")

# Validate MCP config file if provided
if [ -n "$MCP_CONFIG_FILE" ]; then
    if [ ! -f "$MCP_CONFIG_FILE" ]; then
        log "Error: MCP config file '$MCP_CONFIG_FILE' not found."
        exit 1
    fi
    MCP_CONFIG_FILE_ABS=$(realpath "$MCP_CONFIG_FILE")
    log "Using MCP config file: $MCP_CONFIG_FILE_ABS"
fi

PROJECT_DOT_JBSAYS_DIR="${PROJECT_DIR_HOST_ABS}/.jbsays"
PROJECT_JBSAYS_CONFIG_DIR="${PROJECT_DOT_JBSAYS_DIR}/config"
PROJECT_JBSAYS_CONFIG_FILE="${PROJECT_DOT_JBSAYS_DIR}/.claude.json"
PROJECT_JBSAYS_LOGS_DIR="${PROJECT_DOT_JBSAYS_DIR}/logs"
PROJECT_KNOWTHYSELF_DIR="${PROJECT_DIR_HOST_ABS}/.knowthyself"
mkdir -p "$PROJECT_JBSAYS_CONFIG_DIR" "$PROJECT_JBSAYS_LOGS_DIR" "$PROJECT_KNOWTHYSELF_DIR"
touch "$PROJECT_JBSAYS_CONFIG_FILE"

# --- Function to create .knowthyself context ---
create_knowthyself_context() {
    log "Creating .knowthyself execution context..."
    
    # List of files to copy to .knowthyself
    KNOWTHYSELF_FILES=(
        "${SCRIPT_DIR}/jbsays"
        "${SCRIPT_DIR}/Dockerfile"
        "${SCRIPT_DIR}/Dockerfile.extensions"
        "${SCRIPT_DIR}/double_trinity_prompt.md"
        "${SCRIPT_DIR}/.mcp.json"
        "${SCRIPT_DIR}/extensions/docker-compose.yml"
        "${SCRIPT_DIR}/extensions/.env"
    )
    
    # Copy files that exist
    for file in "${KNOWTHYSELF_FILES[@]}"; do
        filename=$(basename "$file")
        if [ -f "$file" ]; then
            cp "$file" "${PROJECT_KNOWTHYSELF_DIR}/${filename}"
            log "Copied $filename to .knowthyself/"
        else
            echo "# File not found: $file" > "${PROJECT_KNOWTHYSELF_DIR}/${filename}.missing"
            log "File $filename missing, created .missing marker"
        fi
    done
    
    # Create execution context metadata
    cat > "${PROJECT_KNOWTHYSELF_DIR}/execution-context.json" << EOF
{
    "timestamp": "$(date -Iseconds)",
    "script_dir": "${SCRIPT_DIR}",
    "project_dir": "${PROJECT_DIR_HOST_ABS}",
    "docker_image": "${DOCKER_FULL_IMAGE}",
    "container_name": "${CONTAINER_NAME}",
    "focus_area": "${FOCUS_AREA_VAR:-not_set}",
    "max_turns": "${MAX_TURNS_VAR:-not_set}",
    "enter_mode": "$ENTER_MODE",
    "init_mode": "$INIT_MODE",
    "content_at_root": "$CONTENT_AT_ROOT",
    "mcp_config_file": "${MCP_CONFIG_FILE:-none}",
    "allowed_tools": "${ALLOWED_TOOLS:-none}",
    "docker_network": "${DOCKER_NETWORK:-none}",
    "port_mappings": [$(printf '"%s",' "${PORT_MAPPINGS[@]}" | sed 's/,$//')]
}
EOF
    
    # Create launch flags file
    echo "# JBSays launch flags used for this session" > "${PROJECT_KNOWTHYSELF_DIR}/launch-flags.txt"
    printf "DOCKER_CMD_OVERRIDE: %s\n" "${DOCKER_CMD_OVERRIDE[*]}" >> "${PROJECT_KNOWTHYSELF_DIR}/launch-flags.txt"
    printf "DOCKER_RUN_OPTS: %s\n" "${DOCKER_RUN_OPTS[*]}" >> "${PROJECT_KNOWTHYSELF_DIR}/launch-flags.txt"
    
    log ".knowthyself context created successfully"
}

ensure_double_trinity_structure() {
    log "Ensuring Double Trinity Canon directory structure in ${PROJECT_DIR_HOST_ABS}"
    for domain in "${CANON_DOMAINS[@]}"; do
        for locus in "${CANON_LOCI_PRIMARY[@]}"; do
            mkdir -p "${PROJECT_DIR_HOST_ABS}/${domain}/${locus}"
        done
    done
    # Create the new centralized inbox structure
    mkdir -p "${PROJECT_DIR_HOST_ABS}/inbox/to_human"
    mkdir -p "${PROJECT_DIR_HOST_ABS}/inbox/from_human"
    touch "${PROJECT_DIR_HOST_ABS}/CLAUDE.md"
    touch "${PROJECT_DIR_HOST_ABS}/rules/content/roles.md"
}

# We'll create the structure later during execute_docker

if (! $NO_GIT || [ -d "${PROJECT_DIR_HOST_ABS}/.git" ]); then
    GITIGNORE_FILE="${PROJECT_DIR_HOST_ABS}/.gitignore"
    if [ ! -f "$GITIGNORE_FILE" ]; then
        log "Creating .gitignore file in project directory"
        echo "# JBSays temporary files" > "$GITIGNORE_FILE"
        echo ".jbsays/" >> "$GITIGNORE_FILE"
    elif ! grep -q "^\.jbsays/\?$" "$GITIGNORE_FILE"; then
        log "Adding .jbsays to existing .gitignore"
        echo -e "\n# JBSays temporary files\n.jbsays/" >> "$GITIGNORE_FILE"
    fi
fi


# --- Function to select Focus Area using defined weights ---
select_focus_area() {
    local total_weight=0
    local cumulative_weight=0
    declare -a weighted_areas # Array to store area:cumulative_weight
    declare -a area_keys # Store keys in a defined order

    # Build the area_keys array in a fixed order to ensure consistent processing
    # This order should match the keys in FOCUS_AREA_WEIGHTS
    for domain in "${CANON_DOMAINS[@]}"; do
        for locus in "${CANON_LOCI_PRIMARY[@]}"; do
            area_keys+=("${domain}/${locus}")
        done
    done

    # Calculate total weight and build cumulative list
    # Use shuf to iterate over keys in a random order IF DESIRED,
    # but for defined weights, a fixed order of processing is better for predictability of the ranges.
    # Using the fixed order from area_keys:
    for area in "${area_keys[@]}"; do
        weight=${FOCUS_AREA_WEIGHTS[$area]}
        if [ -z "$weight" ]; then
            log "Warning: Weight not defined for focus area '$area'. Skipping."
            continue
        fi
        total_weight=$((total_weight + weight))
        cumulative_weight=$((cumulative_weight + weight))
        weighted_areas+=("${area}:${cumulative_weight}")
    done

    if [ "$total_weight" -eq 0 ]; then
        log "Error: Total weight for focus areas is 0. Cannot select an area."
        # Fallback to uniform random from CANON_LOCI_PRIMARY if all weights are zero
        local possible_focus_areas=()
        for domain in "${CANON_DOMAINS[@]}"; do
            for locus in "${CANON_LOCI_PRIMARY[@]}"; do
                possible_focus_areas+=("${domain}/${locus}")
            done
        done
        local count=${#possible_focus_areas[@]}
        local index=$(( RANDOM % count ))
        echo "${possible_focus_areas[$index]}"
        return
    fi

    # Generate a random number between 1 and total_weight (inclusive)
    local random_pick=$(( (RANDOM % total_weight) + 1 ))

    # Find the selected area
    for item in "${weighted_areas[@]}"; do
        IFS=':' read -r area limit <<< "$item"
        if [ "$random_pick" -le "$limit" ]; then
            echo "$area"
            return
        fi
    done

    # Fallback (should not be reached if logic is correct and total_weight > 0)
    log "Warning: Weighted selection failed, falling back to random key."
    local random_index=$(( RANDOM % ${#area_keys[@]} ))
    echo "${area_keys[$random_index]}"
}


# --- Determine Prompt and Prepare Variables ---
# ... (This section remains largely the same as the previous "unified prompt" version) ...
PROMPT_TEMPLATE_PATH_TO_USE=""
if [ -n "$CUSTOM_PROMPT_FILE_HOST" ]; then
    if [ ! -f "$CUSTOM_PROMPT_FILE_HOST" ]; then log "Error: Custom prompt file '$CUSTOM_PROMPT_FILE_HOST' not found."; exit 1; fi
    log "Using custom prompt template: $CUSTOM_PROMPT_FILE_HOST"
    PROMPT_TEMPLATE_PATH_TO_USE="$CUSTOM_PROMPT_FILE_HOST"
else
    DEFAULT_PROMPT_FILE_ON_HOST="${SCRIPT_DIR}/${DEFAULT_PROMPT_FILENAME}"
    if [ ! -f "$DEFAULT_PROMPT_FILE_ON_HOST" ]; then
        log "Error: Default prompt file '${DEFAULT_PROMPT_FILENAME}' not found in script directory '${SCRIPT_DIR}'."
        log "Please create '${DEFAULT_PROMPT_FILENAME}' or use --magicprompt."
        exit 1
    fi
    log "Using default prompt template (Double Trinity Canon): $DEFAULT_PROMPT_FILE_ON_HOST"
    PROMPT_TEMPLATE_PATH_TO_USE="$DEFAULT_PROMPT_FILE_ON_HOST"
fi

export PROJECT_GOAL_CONTENT_VAR="${PROJECT_GOAL_CONTENT}"
export FOCUS_AREA_VAR=$(select_focus_area) 
export RANDOM_ROLE_SEED_VAR=$(awk 'BEGIN{srand(); printf "%.3f\n", rand()}')

# Set content location variable based on flag
if $CONTENT_AT_ROOT; then
    export CONTENT_AT_ROOT_VAR="IMPORTANT: Content should be created at the project root level, NOT in the release/content subdirectory. All work should be done directly in the project root."
else
    export CONTENT_AT_ROOT_VAR="Content should be created in the appropriate subdirectories according to the Double Trinity Canon structure."
fi
if $ENTER_MODE; then
    export MAX_TURNS_VAR="N/A (Interactive Mode)"
else
    export MAX_TURNS_VAR="$MAX_TURNS"
fi

log "Selected Focus Area for this session: ${FOCUS_AREA_VAR}"
log "Generated Random Role Seed: ${RANDOM_ROLE_SEED_VAR}"

if ! $ENTER_MODE; then
    if [[ ! "$MAX_TURNS" =~ ^[0-9]+$ ]] || [ "$MAX_TURNS" -lt 1 ]; then
        log "Error: --max-turns-by-iteration must be a positive integer for agent mode. Got: '$MAX_TURNS'"
        usage
    fi
    if [[ ! "$ITERATIONS" =~ ^[0-9]+$ ]] || [ "$ITERATIONS" -lt 0 ]; then
        log "Error: --iterations must be a non-negative integer for agent mode. Got: '$ITERATIONS'"
        usage
    fi
fi

# Use prompt override if provided, otherwise use the template with variable substitution
if [ -n "$PROMPT_OVERRIDE_CONTENT" ]; then
    FULL_PROMPT_FOR_CLAUDE="$PROMPT_OVERRIDE_CONTENT"
    log "Using prompt override (bypassing template and variable substitution)"
else
    FULL_PROMPT_FOR_CLAUDE=$(envsubst < "$PROMPT_TEMPLATE_PATH_TO_USE")
    # Append extra content if provided
    if [ -n "$PROMPT_APPEND_CONTENT" ]; then
        FULL_PROMPT_FOR_CLAUDE="${FULL_PROMPT_FOR_CLAUDE}

${PROMPT_APPEND_CONTENT}"
        log "Appended extra content to prompt"
    fi
fi

if $SHOW_FINAL_PROMPT; then
    echo "$FULL_PROMPT_FOR_CLAUDE"
    exit 0
fi

if $VERBOSE_MODE; then
    log "--- PROMPT BEING USED ---"
    echo "$FULL_PROMPT_FOR_CLAUDE"
    log "--- END OF PROMPT ---"
fi


# --- Prepare Docker Run Options and Command ---
# ... (This section remains largely the same as the previous "unified prompt" version) ...
DOCKER_RUN_OPTS=("--rm" "--name" "$CONTAINER_NAME")
if $ENTER_MODE || [ -t 0 ] || $SHOW_FINAL_PROMPT ; then DOCKER_RUN_OPTS+=("-it"); else DOCKER_RUN_OPTS+=("-i"); fi

DOCKER_RUN_OPTS+=("-e" "JBSAYS_CONTAINER_NAME=$CONTAINER_NAME")
DOCKER_RUN_OPTS+=("-v" "${PROJECT_DIR_HOST_ABS}:/home/node/workspace")
DOCKER_RUN_OPTS+=("-v" "${PROJECT_JBSAYS_CONFIG_DIR}:/home/node/.claude")
DOCKER_RUN_OPTS+=("-v" "${PROJECT_JBSAYS_CONFIG_FILE}:/home/node/.claude.json")
DOCKER_RUN_OPTS+=("-v" "${PROJECT_KNOWTHYSELF_DIR}:/home/node/workspace/.knowthyself:ro")
if [ -f "$HOME/.gitconfig" ]; then DOCKER_RUN_OPTS+=("-v" "$HOME/.gitconfig:/home/node/.gitconfig:ro"); fi

# Add port mappings if provided
for port_mapping in "${PORT_MAPPINGS[@]}"; do
    # Validate port mapping format (host:container or just port)
    if [[ "$port_mapping" =~ ^[0-9]+:[0-9]+$ ]] || [[ "$port_mapping" =~ ^[0-9]+$ ]]; then
        DOCKER_RUN_OPTS+=("-p" "$port_mapping")
        log "Added port mapping: $port_mapping"
    else
        log "Warning: Invalid port mapping format '$port_mapping'. Use format 'host:container' or 'port'"
    fi
done

# Add network if provided
if [ -n "$DOCKER_NETWORK" ]; then
    DOCKER_RUN_OPTS+=("--network" "$DOCKER_NETWORK")
    log "Connected to Docker network: $DOCKER_NETWORK"
fi

# Mount MCP config file if provided
if [ -n "${MCP_CONFIG_FILE_ABS:-}" ]; then
    DOCKER_RUN_OPTS+=("-v" "${MCP_CONFIG_FILE_ABS}:/home/node/workspace/.mcp.json:ro")
fi

DOCKER_CMD_OVERRIDE=()
if $ENTER_BYPASS_MODE || $INIT_MODE; then
    DOCKER_CMD_OVERRIDE+=("claude" "--dangerously-skip-permissions")
else
    DOCKER_CMD_OVERRIDE+=("claude")
fi

if ! $ENTER_MODE && ([ -n "$PROMPT_OVERRIDE_CONTENT" ] || [ -s "$PROMPT_TEMPLATE_PATH_TO_USE" ]); then
    DOCKER_CMD_OVERRIDE+=("-p" "$FULL_PROMPT_FOR_CLAUDE")
elif ! $ENTER_MODE; then
    log "Warning: No prompt available. Claude will run without a system prompt."
fi

if ! $ENTER_MODE; then
    log "Agent mode specific CLI args (max turns: $MAX_TURNS_VAR)"
    # Ensure --dangerously-skip-permissions is set for agent mode if not already
    # This logic is a bit complex to ensure it's only added once.
    has_skip_permissions=false
    for arg in "${DOCKER_CMD_OVERRIDE[@]}"; do
        if [[ "$arg" == "--dangerously-skip-permissions" ]]; then
            has_skip_permissions=true
            break
        fi
    done
    if ! $has_skip_permissions; then
         # Insert --dangerously-skip-permissions after "claude"
        cmd_part_one=("${DOCKER_CMD_OVERRIDE[0]}") # "claude"
        cmd_part_two=("${DOCKER_CMD_OVERRIDE[@]:1}") # The rest of the args (e.g., -p prompt)
        DOCKER_CMD_OVERRIDE=("${cmd_part_one[@]}" "--dangerously-skip-permissions" "${cmd_part_two[@]}")
    fi

    DOCKER_CMD_OVERRIDE+=("--verbose")
    DOCKER_CMD_OVERRIDE+=("--output-format" "stream-json")
    DOCKER_CMD_OVERRIDE+=("--max-turns" "$MAX_TURNS")
    
    # Add MCP flags if configured
    add_mcp_flags
fi
log "Final Docker CMD override: ${DOCKER_CMD_OVERRIDE[*]}"


# --- Execute Docker ---
# ... (execute_docker function remains the same as previous "unified prompt" version) ...
execute_docker() {
    local LOG_FILE_PATH="${PROJECT_JBSAYS_LOGS_DIR}/claude_run_$(date +%Y%m%d_%H%M%S).log"
    
    # Create .knowthyself context before running Docker
    create_knowthyself_context
    
    log "Project dir (host): ${PROJECT_DIR_HOST_ABS}"
    if ! $ENTER_MODE; then
        log "Log file for agent run: ${LOG_FILE_PATH}"
    fi
    log "Invoking Docker..."
    
    local FINAL_DOCKER_COMMAND=("docker" "run" "${DOCKER_RUN_OPTS[@]}" "${DOCKER_FULL_IMAGE}" "${DOCKER_CMD_OVERRIDE[@]}")
    
    if $VERBOSE_MODE; then
      log "Executing: ${FINAL_DOCKER_COMMAND[*]}"
    fi
    
    if $ENTER_MODE; then
        if "${FINAL_DOCKER_COMMAND[@]}"; then
            log "Docker interactive session finished."
        else
            log "Docker interactive session exited (code: $?)."
        fi
        if $INIT_MODE; then
            ensure_double_trinity_structure
        fi
        return 0 
    else 
        # Only create the structure in agent mode if INIT_MODE is enabled
        if $INIT_MODE; then
            ensure_double_trinity_structure
        fi

        if "${FINAL_DOCKER_COMMAND[@]}" 2>&1 | tee "$LOG_FILE_PATH"; then
            EXIT_CODE_ARRAY=("${PIPESTATUS[@]}")
            DOCKER_RUN_EXIT_CODE=${EXIT_CODE_ARRAY[0]}
            if [ "$DOCKER_RUN_EXIT_CODE" -eq 0 ]; then
                log "Docker agent run finished successfully. Log: $LOG_FILE_PATH"
                # Regenerate random seed for next conversation in case we hit MAX_TURNS
                export RANDOM_ROLE_SEED_VAR=$(awk 'BEGIN{srand(); printf "%.3f\n", rand()}')
                log "Generated new Random Role Seed for next conversation: ${RANDOM_ROLE_SEED_VAR}"
                # Regenerate prompt with the new random seed (unless using override)
                if [ -n "$PROMPT_OVERRIDE_CONTENT" ]; then
                    FULL_PROMPT_FOR_CLAUDE="$PROMPT_OVERRIDE_CONTENT"
                else
                    FULL_PROMPT_FOR_CLAUDE=$(envsubst < "$PROMPT_TEMPLATE_PATH_TO_USE")
                    # Append extra content if provided
                    if [ -n "$PROMPT_APPEND_CONTENT" ]; then
                        FULL_PROMPT_FOR_CLAUDE="${FULL_PROMPT_FOR_CLAUDE}

${PROMPT_APPEND_CONTENT}"
                    fi
                fi
                
                # Update DOCKER_CMD_OVERRIDE with the new prompt
                if [[ "${DOCKER_CMD_OVERRIDE[*]}" =~ "-p" ]]; then
                    # Find the position of the -p flag
                    for i in "${!DOCKER_CMD_OVERRIDE[@]}"; do
                        if [[ "${DOCKER_CMD_OVERRIDE[$i]}" == "-p" ]]; then
                            # Replace the prompt that follows the -p flag
                            DOCKER_CMD_OVERRIDE[$((i+1))]="$FULL_PROMPT_FOR_CLAUDE"
                            break
                        fi
                    done
                fi
            else
                log "Docker agent run exited with code $DOCKER_RUN_EXIT_CODE. Log: $LOG_FILE_PATH"
                if [ "$ITERATIONS" -eq 1 ]; then
                    if $FALLBACK_TO_INTERACTIVE; then
                        log "Agent mode failed. Will fallback to interactive mode..."
                        return 1 
                    else
                        exit "$DOCKER_RUN_EXIT_CODE"
                    fi
                fi
            fi
        else
            log "Docker agent run failed (tee or pipe error). Log: $LOG_FILE_PATH"
            if [ "$ITERATIONS" -eq 1 ]; then
                if $FALLBACK_TO_INTERACTIVE; then
                    log "Agent mode failed. Will fallback to interactive mode..."
                    return 1
                else
                    exit 1
                fi
            fi
        fi
    fi
}

# --- Main Execution Logic ---
# ... (This section remains largely the same as the previous "unified prompt" version, but ensures DOCKER_CMD_OVERRIDE is reconstructed correctly for iterations/fallbacks) ...
if [ "$ITERATIONS" -gt 1 ] || [ "$ITERATIONS" -eq 0 ]; then
    if $ENTER_MODE; then
        log "Error: Iterations > 1 not supported with --enter mode. Running once."
        execute_docker
        exit 0
    fi

    LOOP_COUNT=0
    trap 'log "Caught interrupt signal. Exiting iterations..."; exit 0' INT
    
    while [ "$ITERATIONS" -eq 0 ] || [ $LOOP_COUNT -lt "$ITERATIONS" ]; do
        LOOP_COUNT=$((LOOP_COUNT + 1))
        log "=== Iteration #$LOOP_COUNT ==="
        
        export FOCUS_AREA_VAR=$(select_focus_area)
        export RANDOM_ROLE_SEED_VAR=$(awk 'BEGIN{srand(); printf "%.3f\n", rand()}')
        export MAX_TURNS_VAR="$MAX_TURNS"
        
        # Keep content location variable consistent during iterations
        if $CONTENT_AT_ROOT; then
            export CONTENT_AT_ROOT_VAR="IMPORTANT: Content should be created at the project root level, NOT in the release/content subdirectory. All work should be done directly in the project root."
        else
            export CONTENT_AT_ROOT_VAR="Content should be created in the appropriate subdirectories according to the Double Trinity Canon structure."
        fi

        log "Selected Focus Area for this iteration: ${FOCUS_AREA_VAR}"
        log "Generated Random Role Seed: ${RANDOM_ROLE_SEED_VAR}"

        # Use prompt override if provided, otherwise use template with variable substitution
        if [ -n "$PROMPT_OVERRIDE_CONTENT" ]; then
            FULL_PROMPT_FOR_CLAUDE="$PROMPT_OVERRIDE_CONTENT"
        else
            FULL_PROMPT_FOR_CLAUDE=$(envsubst < "$PROMPT_TEMPLATE_PATH_TO_USE")
            # Append extra content if provided
            if [ -n "$PROMPT_APPEND_CONTENT" ]; then
                FULL_PROMPT_FOR_CLAUDE="${FULL_PROMPT_FOR_CLAUDE}

${PROMPT_APPEND_CONTENT}"
            fi
        fi
        
        # Reconstruct DOCKER_CMD_OVERRIDE for agent iteration
        DOCKER_CMD_OVERRIDE=("claude" "--dangerously-skip-permissions") # Agent mode always needs this
        # Add prompt for agent mode (never enter mode in iterations)
        if [ -n "$PROMPT_OVERRIDE_CONTENT" ] || [ -s "$PROMPT_TEMPLATE_PATH_TO_USE" ]; then
            DOCKER_CMD_OVERRIDE+=("-p" "$FULL_PROMPT_FOR_CLAUDE")
        fi
        DOCKER_CMD_OVERRIDE+=("--verbose" "--output-format" "stream-json" "--max-turns" "$MAX_TURNS")
        
        # Add MCP flags if configured
        add_mcp_flags

        execute_docker
        
        if [ "$ITERATIONS" -gt 0 ] && [ $LOOP_COUNT -ge "$ITERATIONS" ]; then
            break
        fi
        log "Waiting 1 second before next iteration..."
        sleep 1
    done
else
    execute_docker
    EXECUTE_RESULT=$?
    
    if [ $EXECUTE_RESULT -eq 1 ] && $FALLBACK_TO_INTERACTIVE && ! $ENTER_MODE; then
        log "Starting interactive mode as fallback..."
        ENTER_MODE=true 
        
        export FOCUS_AREA_VAR=$(select_focus_area)
        export RANDOM_ROLE_SEED_VAR=$(awk 'BEGIN{srand(); printf "%.3f\n", rand()}')
        export MAX_TURNS_VAR="N/A (Interactive Fallback)"
        
        # Keep content location variable consistent during fallback
        if $CONTENT_AT_ROOT; then
            export CONTENT_AT_ROOT_VAR="IMPORTANT: Content should be created at the project root level, NOT in the release/content subdirectory. All work should be done directly in the project root."
        else
            export CONTENT_AT_ROOT_VAR="Content should be created in the appropriate subdirectories according to the Double Trinity Canon structure."
        fi
        log "Fallback: Selected Focus Area: ${FOCUS_AREA_VAR}, Role Seed: ${RANDOM_ROLE_SEED_VAR}"

        # Use prompt override if provided, otherwise use template with variable substitution  
        if [ -n "$PROMPT_OVERRIDE_CONTENT" ]; then
            FULL_PROMPT_FOR_CLAUDE="$PROMPT_OVERRIDE_CONTENT"
        else
            FULL_PROMPT_FOR_CLAUDE=$(envsubst < "$PROMPT_TEMPLATE_PATH_TO_USE")
            # Append extra content if provided
            if [ -n "$PROMPT_APPEND_CONTENT" ]; then
                FULL_PROMPT_FOR_CLAUDE="${FULL_PROMPT_FOR_CLAUDE}

${PROMPT_APPEND_CONTENT}"
            fi
        fi

        if $ENTER_BYPASS_MODE || $INIT_MODE; then
            DOCKER_CMD_OVERRIDE=("claude" "--dangerously-skip-permissions")
        else
            DOCKER_CMD_OVERRIDE=("claude")
        fi
        # --enter mode has no prompt
        
        # Add MCP flags if configured
        add_mcp_flags
        
        execute_docker
    fi
fi

if $INIT_MODE; then
    log "Init mode: running interactive mode a second time for full initialization/authentication..."
    ENTER_MODE=true 
    
    export FOCUS_AREA_VAR=$(select_focus_area)
    export RANDOM_ROLE_SEED_VAR=$(awk 'BEGIN{srand(); printf "%.3f\n", rand()}')
    export MAX_TURNS_VAR="N/A (Interactive Init)"
    
    # Keep content location variable consistent during init
    if $CONTENT_AT_ROOT; then
        export CONTENT_AT_ROOT_VAR="IMPORTANT: Content should be created at the project root level, NOT in the release/content subdirectory. All work should be done directly in the project root."
    else
        export CONTENT_AT_ROOT_VAR="Content should be created in the appropriate subdirectories according to the Double Trinity Canon structure."
    fi
    log "Second Init: Selected Focus Area: ${FOCUS_AREA_VAR}, Role Seed: ${RANDOM_ROLE_SEED_VAR}"
    
    # Use prompt override if provided, otherwise use template with variable substitution
    if [ -n "$PROMPT_OVERRIDE_CONTENT" ]; then
        FULL_PROMPT_FOR_CLAUDE="$PROMPT_OVERRIDE_CONTENT"
    else
        FULL_PROMPT_FOR_CLAUDE=$(envsubst < "$PROMPT_TEMPLATE_PATH_TO_USE")
        # Append extra content if provided
        if [ -n "$PROMPT_APPEND_CONTENT" ]; then
            FULL_PROMPT_FOR_CLAUDE="${FULL_PROMPT_FOR_CLAUDE}

${PROMPT_APPEND_CONTENT}"
        fi
    fi
    
    if $ENTER_BYPASS_MODE || $INIT_MODE; then
        DOCKER_CMD_OVERRIDE=("claude" "--dangerously-skip-permissions")
    else
        DOCKER_CMD_OVERRIDE=("claude")
    fi
    # --enter mode has no prompt
    
    # Add MCP flags if configured
    add_mcp_flags

    execute_docker
    
    log "Finalizing Double Trinity Canon structure post-init..."
    ensure_double_trinity_structure

    if ! $NO_GIT && [ ! -d "${PROJECT_DIR_HOST_ABS}/.git" ]; then
        log "No .git directory found. Attempting to initialize git repository..."
        if ! git -C "${PROJECT_DIR_HOST_ABS}" init > /dev/null 2>&1; then
            log "ERROR: Failed to initialize git repository. Git might not be installed or accessible."
            log "To skip git initialization, use the --no-git flag."
        else
            log "Git repository initialized successfully."
            (cd "${PROJECT_DIR_HOST_ABS}" && git add . && git commit -m "Initial JBSays Double Trinity Canon project setup" > /dev/null 2>&1 || echo "Initial commit failed or nothing to commit.")
        fi
    fi
fi

log "Script finished."
