[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mware"
dynamic = ["version"]
description = "A Python library for writing decorators like middleware with exceptional developer experience"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
authors = [
    { name = "Middleware Decorators Team", email = "team@mware.dev" },
]
maintainers = [
    { name = "Middleware Decorators Team", email = "team@mware.dev" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Web Environment",
    "Framework :: AsyncIO",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
    "Typing :: Typed",
]
keywords = ["middleware", "decorators", "async", "asyncio", "chain", "pipeline", "web", "framework", "composable", "type-safe"]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-asyncio>=0.21",
    "pytest-cov>=4.0",
    "mypy>=1.0",
    "black>=23.0",
    "isort>=5.12",
    "ruff>=0.1",
]
docs = [
    "mkdocs>=1.5",
    "mkdocs-material>=9.0",
    "mkdocstrings[python]>=0.24",
]

[project.urls]
Documentation = "https://mware.dev"
Source = "https://github.com/mware/mware"
Issues = "https://github.com/mware/mware/issues"

[tool.hatch.version]
path = "src/mware/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/examples",
    "README.md",
    "LICENSE",
]

[tool.hatch.build.targets.wheel]
packages = ["src/mware"]

[tool.black]
line-length = 88
target-version = ["py38"]

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.ruff]
line-length = 88
target-version = "py38"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
]
ignore = ["E501", "B008"]
fix = true

[tool.mypy]
python_version = "3.8"
strict = true
warn_return_any = true
warn_unused_configs = true
no_implicit_reexport = true
namespace_packages = true
show_error_codes = true
show_column_numbers = true
pretty = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config --cov=mware"
testpaths = ["tests"]
asyncio_mode = "auto"

[tool.coverage.run]
branch = true
source = ["src/mware"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]
fail_under = 90
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

[tool.hatch.envs.default]
dependencies = [
    "pytest>=7.0",
    "pytest-asyncio>=0.21",
    "pytest-cov>=4.0",
    "pytest-mock>=3.10",
    "pytest-timeout>=2.1",
    "mypy>=1.0",
    "black>=23.0",
    "isort>=5.12",
    "ruff>=0.1",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args}"
test-cov = "pytest --cov {args}"
cov-report = [
    "- coverage combine",
    "coverage report",
    "coverage html",
]
format = [
    "isort .",
    "black .",
    "ruff --fix .",
]
lint = [
    "black --check --diff .",
    "isort --check-only --diff .",
    "ruff check .",
    "mypy .",
]
all = [
    "format",
    "lint",
    "test-cov",
]

[tool.hatch.envs.docs]
dependencies = [
    "mkdocs>=1.5",
    "mkdocs-material>=9.0",
    "mkdocstrings[python]>=0.24",
    "mkdocs-gen-files>=0.5",
    "mkdocs-literate-nav>=0.6",
    "mkdocs-section-index>=0.3",
]

[tool.hatch.envs.docs.scripts]
build = "mkdocs build"
serve = "mkdocs serve --dev-addr localhost:8000"
deploy = "mkdocs gh-deploy --force"

[tool.hatch.envs.test]
features = ["dev"]
template = "test"

[[tool.hatch.envs.test.matrix]]
python = ["3.8", "3.9", "3.10", "3.11", "3.12"]

[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101"]  # assert_used

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]  # Use of assert
"examples/*" = ["INP001", "T201"]  # No __init__.py needed, print allowed